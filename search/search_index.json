{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Ruleta en L\u00ednea","text":"<p>Este proyecto es una aplicaci\u00f3n web de ruleta de casino multijugador en tiempo real, construida sobre una arquitectura de microservicios. Permite a los usuarios registrarse, iniciar sesi\u00f3n, gestionar su saldo y realizar apuestas en una ruleta virtual interactiva, todo sincronizado en vivo.</p>"},{"location":"index.html#caracteristicas-principales","title":"Caracter\u00edsticas Principales","text":"<ul> <li>Juego en Tiempo Real: La comunicaci\u00f3n se realiza mediante WebSockets para una experiencia de juego fluida y sincronizada entre todos los jugadores.</li> <li>Arquitectura de Microservicios: L\u00f3gica de negocio desacoplada en servicios independientes (autenticaci\u00f3n, saldo, gesti\u00f3n del juego) que se comunican a trav\u00e9s de gRPC para alta eficiencia.</li> <li>Autenticaci\u00f3n Segura: Sistema completo de registro e inicio de sesi\u00f3n de usuarios.</li> <li>Gesti\u00f3n de Saldos Dedicada: Un microservicio exclusivo maneja las transacciones de saldo de los usuarios de forma segura y aislada.</li> <li>Interfaz de Usuario Interactiva: Frontend moderno y reactivo construido con React, TypeScript y Vite.</li> <li>Containerizaci\u00f3n Completa: Todo el proyecto est\u00e1 containerizado con Docker y orquestado con Docker Compose para un despliegiegue y desarrollo simplificado.</li> </ul>"},{"location":"index.html#stack-tecnologico","title":"Stack Tecnol\u00f3gico","text":"Componente Tecnolog\u00edas Contenedores Docker, Docker Compose Frontend React, TypeScript, Vite, Jotai, TanStack Query, Socket.IO Client Backend (API Gateway) Node.js, Express, gRPC Microservicios Node.js (Management), Python (Auth, Balance), gRPC, Socket.IO Comunicaci\u00f3n REST, gRPC, WebSockets Base de Datos (Cache) Redis (para sesiones de usuario y estado del juego en tiempo real) Base de Datos (Core) SQL (modelo definido en <code>backend/data_model.sql</code>)"},{"location":"index.html#arquitectura-del-sistema","title":"Arquitectura del Sistema","text":"<p>El sistema est\u00e1 compuesto por un frontend, un API Gateway que act\u00faa como punto de entrada, y varios microservicios especializados que manejan la l\u00f3gica de negocio.</p> <pre><code>graph TD\n    subgraph User Interface\n        A[Frontend - React]\n    end\n\n    subgraph Backend Services\n        B[API Gateway - Node/Express]\n        C[Management Microservice - Node/Socket.IO]\n        D[Auth Microservice - Python/gRPC]\n        E[Balance Microservice - Python/gRPC]\n        F[Redis Cache]\n    end\n\n    A -- REST API (Login/Register) --&gt; B\n    B -- gRPC --&gt; D\n    A -- WebSocket (Game Events) --&gt; C\n    C -- gRPC --&gt; E\n    C -- Reads/Writes --&gt; F</code></pre> <ul> <li>Frontend: La interfaz de usuario con la que interact\u00faan los jugadores. Se comunica v\u00eda REST con el API Gateway para la autenticaci\u00f3n y mantiene una conexi\u00f3n WebSocket persistente con el <code>management_microservice</code> para el juego.</li> <li>API Gateway (<code>backend/</code>): El \u00fanico punto de entrada para las solicitudes HTTP del frontend. Delega las tareas de autenticaci\u00f3n a los microservicios correspondientes.</li> <li>Management Microservice (<code>management_microservice/</code>): El coraz\u00f3n del juego. Gestiona el ciclo de la ruleta (<code>GameLoop.ts</code>), las conexiones de los jugadores (<code>SocketService.ts</code>), las apuestas y los resultados.</li> <li>Auth &amp; Balance Microservices: Servicios gRPC escritos en Python que manejan responsabilidades espec\u00edficas: autenticaci\u00f3n de usuarios y gesti\u00f3n de saldos, respectivamente.</li> </ul>"},{"location":"index.html#instalacion-y-ejecucion-local","title":"Instalaci\u00f3n y Ejecuci\u00f3n Local","text":"<p>Para ejecutar este proyecto en tu m\u00e1quina local, es necesario tener Docker y Docker Compose instalados.</p>"},{"location":"index.html#prerrequisitos","title":"Prerrequisitos","text":"<ul> <li>Docker</li> <li>Docker Compose</li> </ul>"},{"location":"index.html#pasos-para-la-ejecucion","title":"Pasos para la Ejecuci\u00f3n","text":"<ol> <li> <p>Clonar el repositorio</p> <pre><code>git clone &lt;URL_DEL_REPOSITORIO&gt;\ncd roulette\n</code></pre> </li> <li> <p>Construir e iniciar los contenedores     Este comando leer\u00e1 el archivo <code>docker-compose.yml</code>, construir\u00e1 las im\u00e1genes de cada servicio y los iniciar\u00e1 en segundo plano.</p> <pre><code>docker-compose up --build -d\n</code></pre> </li> <li> <p>Verificar que los servicios est\u00e9n corriendo     Puedes ver el estado de todos los contenedores con:</p> <pre><code>docker-compose ps\n</code></pre> <p>Deber\u00edas ver todos los servicios (<code>frontend</code>, <code>backend</code>, <code>auth_microservice</code>, etc.) con el estado <code>Up</code>.</p> </li> <li> <p>Acceder a la aplicaci\u00f3n     Una vez que todos los contenedores est\u00e9n en funcionamiento, abre tu navegador y navega a:     http://localhost:3210</p> </li> </ol>"},{"location":"index.html#despliegue-en-produccion","title":"Despliegue en Producci\u00f3n","text":"<p>La arquitectura basada en Docker y Docker Compose simplifica enormemente el despliegue en un entorno de producci\u00f3n. Todos los servicios est\u00e1n dise\u00f1ados para ejecutarse como contenedores aislados.</p> <ol> <li> <p>Preparaci\u00f3n del Servidor:</p> <ul> <li>Aseg\u00farate de que tu servidor de producci\u00f3n tenga Docker y Docker Compose instalados.</li> <li>Clona el repositorio en el servidor.</li> </ul> </li> <li> <p>Configuraci\u00f3n de Entorno (Opcional):</p> <ul> <li>Si necesitas variables de entorno espec\u00edficas para producci\u00f3n (ej. credenciales de base de datos, secretos), puedes crear un archivo <code>.env</code> en la ra\u00edz del proyecto. Docker Compose lo cargar\u00e1 autom\u00e1ticamente.</li> </ul> </li> <li> <p>Lanzamiento de la Aplicaci\u00f3n:</p> <ul> <li>Utiliza el mismo comando que en el desarrollo local para construir e iniciar todos los servicios en modo detached (en segundo plano):   <pre><code>docker-compose up --build -d\n</code></pre></li> <li>Esto iniciar\u00e1 todos los microservicios y el frontend. El frontend, en particular, se construye para producci\u00f3n y es servido eficientemente por PM2 dentro de su contenedor Docker, como se define en <code>frontend/ecosystem.config.cjs</code>.</li> </ul> </li> <li> <p>Configuraci\u00f3n de un Reverse Proxy (Recomendado):</p> <ul> <li>La aplicaci\u00f3n frontend estar\u00e1 disponible en el puerto <code>3210</code> del host. Para un entorno de producci\u00f3n real, se recomienda configurar un reverse proxy como Nginx o Caddy para:</li> <li>Gestionar los certificados SSL/TLS (HTTPS).</li> <li>Mapear tu dominio (ej. <code>casino.tudominio.com</code>) al servicio del frontend (<code>localhost:3210</code>).</li> <li>Manejar el tr\u00e1fico de WebSockets de manera eficiente.</li> </ul> </li> <li> <p>Monitoreo y Mantenimiento:</p> <ul> <li>Puedes verificar el estado de tus contenedores en cualquier momento con <code>docker-compose ps</code>.</li> <li>Para ver los logs de un servicio espec\u00edfico (por ejemplo, <code>management_microservice</code>):   <pre><code>docker-compose logs -f management_microservice\n</code></pre></li> </ul> </li> </ol>"},{"location":"index.html#detener-la-aplicacion","title":"Detener la Aplicaci\u00f3n","text":"<p>Para detener y eliminar todos los contenedores y redes creadas por Docker Compose, ejecuta:</p> <pre><code>docker-compose down\n</code></pre>"},{"location":"index.html#estructura-del-proyecto","title":"Estructura del Proyecto","text":"<pre><code>.\n\u251c\u2500\u2500 auth_microservice/      # Microservicio de autenticaci\u00f3n (Python, gRPC)\n\u251c\u2500\u2500 backend/                # API Gateway (Node.js, Express)\n\u251c\u2500\u2500 balance_microservice/   # Microservicio de saldos (Python, gRPC)\n\u251c\u2500\u2500 frontend/               # Aplicaci\u00f3n de cliente (React, TypeScript)\n\u251c\u2500\u2500 management_microservice/  # Microservicio de l\u00f3gica de juego (Node.js, Socket.IO)\n\u251c\u2500\u2500 docker-compose.yml      # Orquestador de todos los servicios\n\u251c\u2500\u2500 package.json            # Dependencias y scripts a nivel ra\u00edz\n\u2514\u2500\u2500 README.md               # Este archivo\n</code></pre>"},{"location":"arreglos_de_discos/index.html","title":"Utilizando m\u00faltiples discos","text":"<p>Un arreglo de discos (RAID, por sus siglas en ingl\u00e9s: Redundant Array of Independent Disks) es una tecnolog\u00eda que combina m\u00faltiples discos duros en una sola unidad l\u00f3gica para mejorar el rendimiento, la redundancia o ambas. RAID se utiliza com\u00fanmente en servidores y sistemas de almacenamiento para proteger datos contra fallos de hardware.</p>"},{"location":"arreglos_de_discos/index.html#tipos-de-raid","title":"Tipos de RAID","text":""},{"location":"arreglos_de_discos/index.html#raid-0-striping","title":"RAID 0 (Striping)","text":"<p>Explicaci\u00f3n: Divide los datos en bloques (\"stripes\") y los distribuye entre m\u00faltiples discos sin redundancia. Diagrama: <pre><code>flowchart LR\n    A[Dato A1] --&gt; Disco1\n    B[Dato A2] --&gt; Disco2\n    C[Dato A3] --&gt; Disco3</code></pre></p> <p>Ventajas: - Alto rendimiento (lectura/escritura en paralelo). - M\u00e1ximo almacenamiento \u00fatil (suma de todos los discos).  </p> <p>Desventajas: - Sin tolerancia a fallos (si un disco falla, se pierden todos los datos). - Riesgo alto para datos cr\u00edticos.</p>"},{"location":"arreglos_de_discos/index.html#raid-1-mirroring","title":"RAID 1 (Mirroring)","text":"<p>Explicaci\u00f3n: Crea una copia exacta (espejo) de los datos en dos o m\u00e1s discos. Diagrama: <pre><code>flowchart LR\n    A[Dato A] --&gt; Disco1\n    A[Dato A] --&gt; Disco2</code></pre></p> <p>Ventajas: - Redundancia total (un disco puede fallar sin p\u00e9rdida de datos). - R\u00e1pida recuperaci\u00f3n (reemplazo sencillo del disco da\u00f1ado).  </p> <p>Desventajas: - Alto costo (50% de almacenamiento \u00fatil; ej: 2x1TB = 1TB usable). - Rendimiento moderado (escritura m\u00e1s lenta al duplicar datos).</p>"},{"location":"arreglos_de_discos/index.html#raid-5-striping-paridad-distribuida","title":"RAID 5 (Striping + Paridad Distribuida)","text":"<p>Explicaci\u00f3n: Combina \"striping\" con paridad distribuida. La paridad se reparte entre todos los discos. M\u00ednimo: 3 discos. Diagrama: <pre><code>flowchart LR\n    A[Dato A1] --&gt; Disco1\n    B[Dato A2] --&gt; Disco2\n    C[Paridad A] --&gt; Disco3\n    D[Dato B1] --&gt; Disco1\n    E[Paridad B] --&gt; Disco2\n    F[Dato B2] --&gt; Disco3</code></pre></p> <p>Ventajas: - Tolerancia a fallos (soporta 1 disco da\u00f1ado). - Eficiencia de almacenamiento (ej: 3 discos \u2192 66% \u00fatil; 4 discos \u2192 75% \u00fatil).  </p> <p>Desventajas: - Lento en escrituras (c\u00e1lculo de paridad). - Riesgo durante reconstrucci\u00f3n (si falla otro disco, se pierden datos).</p>"},{"location":"arreglos_de_discos/index.html#raid-6-striping-doble-paridad","title":"RAID 6 (Striping + Doble Paridad)","text":"<p>Explicaci\u00f3n: Similar a RAID 5, pero con dos bloques de paridad por cada \"stripe\". M\u00ednimo: 4 discos. Diagrama: <pre><code>flowchart LR\n    A[Dato A1] --&gt; Disco1\n    B[Dato A2] --&gt; Disco2\n    C[Paridad A1] --&gt; Disco3\n    D[Paridad A2] --&gt; Disco4</code></pre></p> <p>Ventajas: - Alta tolerancia a fallos (soporta 2 discos da\u00f1ados simult\u00e1neos). - Ideal para discos grandes o entornos cr\u00edticos.  </p> <p>Desventajas: - Escrituras muy lentas (c\u00e1lculo de doble paridad). - Mayor costo (ej: 4 discos \u2192 50% \u00fatil; 6 discos \u2192 66% \u00fatil).</p>"},{"location":"arreglos_de_discos/index.html#raid-10-raid-10-mirroring-striping","title":"RAID 10 (RAID 1+0: Mirroring + Striping)","text":"<p>Explicaci\u00f3n: Combina RAID 1 (espejo) y RAID 0 (striping). Primero crea espejos, luego divide los datos. M\u00ednimo: 4 discos (en pares). Diagrama: <pre><code>flowchart LR\n    subgraph Mirror1\n        Disco1[Dato A] --&gt; Disco2[Dato A]\n    end\n    subgraph Mirror2\n        Disco3[Dato B] --&gt; Disco4[Dato B]\n    end\n    A[Stripe] --&gt; Mirror1\n    A[Stripe] --&gt; Mirror2</code></pre></p> <p>Ventajas: - Alto rendimiento (lectura/escritura r\u00e1pida). - Tolerancia a fallos m\u00faltiples (si no fallan ambos discos de un mismo espejo).  </p> <p>Desventajas: - Costo elevado (50% de almacenamiento \u00fatil). - Complejidad (requiere m\u00ednimo 4 discos).</p>"},{"location":"arreglos_de_discos/index.html#raid-50-raid-50-striping-de-grupos-raid-5","title":"RAID 50 (RAID 5+0: Striping de Grupos RAID 5)","text":"<p>Explicaci\u00f3n: Combina m\u00faltiples grupos de RAID 5 en un solo RAID 0. M\u00ednimo: 6 discos (2 grupos de RAID 5 con 3 discos cada uno). Diagrama: <pre><code>flowchart LR\n    subgraph RAID5_Grupo1\n        Disco1[Dato A1] --&gt; Disco2[Dato A2] --&gt; Disco3[Paridad A]\n    end\n    subgraph RAID5_Grupo2\n        Disco4[Dato B1] --&gt; Disco5[Dato B2] --&gt; Disco6[Paridad B]\n    end\n    A[Stripe] --&gt; RAID5_Grupo1\n    A[Stripe] --&gt; RAID5_Grupo2</code></pre></p> <p>Ventajas: - Alto rendimiento y capacidad (mejor que RAID 5 individual). - Tolerancia a fallos (1 disco por grupo RAID 5 puede fallar).  </p> <p>Desventajas: - Costo alto (requiere m\u00ednimo 6 discos). - Complejidad de gesti\u00f3n.</p>"},{"location":"arreglos_de_discos/index.html#implementacion-de-raid-en-linux","title":"Implementaci\u00f3n de RAID en Linux","text":"<ol> <li> <p>Instalar herramientas necesarias:    <pre><code>sudo apt update\nsudo apt install mdadm\n</code></pre></p> </li> <li> <p>Crear un arreglo RAID:</p> </li> <li> <p>Por ejemplo, para RAID 1:      <pre><code>sudo mdadm --create \\\n   --verbose /dev/md0 --level=1 \\\n   --raid-devices=2 /dev/sdX /dev/sdY\n</code></pre></p> </li> <li> <p>Verificar el estado del RAID:    <pre><code>cat /proc/mdstat\n</code></pre></p> </li> <li> <p>Guardar la configuraci\u00f3n:    <pre><code>sudo mdadm --detail --scan &gt;&gt; /etc/mdadm/mdadm.conf\n</code></pre></p> </li> <li> <p>Formatear y montar el RAID:    <pre><code>sudo mkfs.ext4 /dev/md0\nsudo mount /dev/md0 /mnt\n</code></pre></p> </li> </ol> <p>Con estos pasos, puedes configurar y gestionar arreglos RAID en Linux de manera eficiente.</p>"},{"location":"cross_origin_resource_sharing/index.html","title":"El mejor amigo del desarrollador","text":"<p>CORS (Intercambio de Recursos de Origen Cruzado por sus siglas) es un mecanismo de seguridad implementado en los navegadores web que controla c\u00f3mo una aplicaci\u00f3n web en un dominio (origen) puede solicitar recursos (como APIs, fuentes o im\u00e1genes) desde otro dominio diferente. Por defecto, los navegadores aplican la pol\u00edtica del mismo origen (Same-Origin Policy), que bloquea peticiones HTTP entre dominios distintos como medida de seguridad para evitar ataques como CSRF (Cross-Site Request Forgery) o robo de datos. CORS relaja esta restricci\u00f3n de manera controlada, permitiendo comunicaci\u00f3n segura entre or\u00edgenes.</p> <p>Cuando un frontend (ej: <code>https://decoupled.dev</code>) intenta acceder a una API en otro dominio (ej: <code>https://api.decoupled.dev</code>), el navegador env\u00eda una petici\u00f3n preflight (OPTIONS) para verificar si el servidor permite solicitudes desde el origen del frontend. El servidor debe responder con cabeceras HTTP como Access-Control-Allow-Origin que especifiquen qu\u00e9 dominios, m\u00e9todos (GET, POST) o cabeceras est\u00e1n permitidos. Si no se configuran correctamente, el navegador bloquear\u00e1 la respuesta por motivos de seguridad.</p>"},{"location":"cross_origin_resource_sharing/index.html#profundizando-en-cors-mecanismos-configuracion-y-buenas-practicas","title":"Profundizando en CORS: Mecanismos, Configuraci\u00f3n y Buenas Pr\u00e1cticas","text":"<p>Cuando se realiza una petici\u00f3n entre dominios, el navegador sigue un protocolo estricto:</p> <p>a) Peticiones Simples (Simple Requests) Solo aplican para m\u00e9todos GET, HEAD o POST con ciertos tipos de contenido. El navegador env\u00eda la petici\u00f3n directamente incluyendo la cabecera: <pre><code>Origin: https://decoupled.dev\n</code></pre> El servidor debe responder con: <pre><code>Access-Control-Allow-Origin: https://decoupled.dev\nAccess-Control-Allow-Credentials: true  // Si se usan cookies\n</code></pre></p> <p>b) Peticiones Preflight (OPTIONS) Para m\u00e9todos PUT, DELETE o POST con contenido JSON, el navegador primero env\u00eda una petici\u00f3n OPTIONS con: <pre><code>Origin: https://decoupled.dev\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: Content-Type\n</code></pre> El servidor debe responder con: <pre><code>Access-Control-Allow-Origin: https://decoupled.dev\nAccess-Control-Allow-Methods: POST, GET, OPTIONS\nAccess-Control-Allow-Headers: Content-Type\nAccess-Control-Max-Age: 86400  // Cache por 24h\n</code></pre></p>"},{"location":"cross_origin_resource_sharing/index.html#configuraciones-avanzadas-en-backend","title":"Configuraciones Avanzadas en Backend","text":"<p>Ejemplo en Node.js (Express): <pre><code>const corsOptions = {\n  origin: 'https://decoupled.dev',\n  methods: ['GET', 'POST', 'PUT'],\n  allowedHeaders: ['Content-Type', 'Authorization'],\n  credentials: true,\n  maxAge: 86400\n};\napp.use(cors(corsOptions));\n</code></pre></p> <p>Ejemplo en Nginx: <pre><code>location /api {\n    if ($request_method = OPTIONS) {\n        add_header 'Access-Control-Allow-Origin' 'https://decoupled.dev';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';\n        return 204;\n    }\n}\n</code></pre></p>"},{"location":"cross_origin_resource_sharing/index.html#escenarios-comunes-y-soluciones","title":"Escenarios Comunes y Soluciones","text":"Escenario Problema Soluci\u00f3n Desarrollo local Frontend (localhost:3000) \u2192 API (localhost:5000) Usar <code>cors({ origin: 'http://localhost:3000' })</code> Microservicios API Gateway (api.example.com) \u2192 Servicio (auth.example.com) Configurar CORS en el gateway AWS S3/CloudFront Acceso a recursos est\u00e1ticos desde m\u00faltiples dominios Especificar <code>AllowedOrigins</code> en la pol\u00edtica CORS del bucket"},{"location":"cross_origin_resource_sharing/index.html#seguridad-y-buenas-practicas","title":"Seguridad y Buenas Pr\u00e1cticas","text":"<ul> <li>Nunca uses <code>Access-Control-Allow-Origin: *</code> en producci\u00f3n con credenciales (cookies, tokens).</li> <li>Validaci\u00f3n estricta de or\u00edgenes: Usar listas blancas (whitelists) en lugar de permitir cualquier origen.</li> <li>Cabeceras sensibles: Limita el acceso a cabeceras como <code>Authorization</code> con <code>exposedHeaders</code>.</li> <li>Pruebas de seguridad: Verifica configuraciones incorrectas con herramientas como OWASP ZAP.</li> </ul> <p>Ejemplo de validaci\u00f3n segura en Express: <pre><code>const allowedOrigins = ['https://decoupled.dev', 'https://staging.decoupled.dev'];\napp.use(cors({\n  origin: (origin, callback) =&gt; {\n    if (!origin || allowedOrigins.includes(origin)) {\n      callback(null, true);\n    } else {\n      callback(new Error('Origen no permitido por CORS'));\n    }\n  }\n}));\n</code></pre></p>"},{"location":"cross_origin_resource_sharing/index.html#casos-especiales","title":"Casos Especiales","text":"<ul> <li>WebSockets: No est\u00e1n sujetos a CORS (usan pol\u00edtica diferente).</li> <li>Cookies entre dominios: Requieren <code>Access-Control-Allow-Credentials: true</code> y or\u00edgenes expl\u00edcitos (no wildcard <code>*</code>).</li> <li>Caching de Preflight: Optimiza con <code>Access-Control-Max-Age</code>.</li> </ul>"},{"location":"empaqueado_de_frontend/index.html","title":"Vite","text":"<p>Es una herramienta de construcci\u00f3n que proporciona dos servicios:</p> <ul> <li>Un servidor de desarrollo que ofrece Hot Module Replacement (HMR).</li> <li>Un empaquetador de producci\u00f3n que genera archivos est\u00e1ticos optimizados usando Rollup.</li> </ul>"},{"location":"empaqueado_de_frontend/index.html#vite-vs-webpack","title":"Vite vs Webpack","text":"<p>Vite es notablemente m\u00e1s r\u00e1pido que otros bundlers tradicionales como Webpack, especialmente durante el desarrollo, debido a varias razones fundamentales en su arquitectura y enfoque:</p> <ul> <li>Uso de ES Modules: Vite aprovecha la capacidad de los navegadores modernos para cargar m\u00f3dulos ES de forma nativa. Esto significa que durante el desarrollo, Vite sirve los archivos directamente al navegador \"on-demand\" (bajo demanda), sin la necesidad de un paso de bundling completo. Esto reduce dr\u00e1sticamente los tiempos de inicio del servidor de desarrollo.</li> <li>Hot Module Replacement (HMR) eficiente: Vite implementa HMR de manera m\u00e1s eficiente al actualizar solo los m\u00f3dulos que han cambiado, en lugar de recargar toda la aplicaci\u00f3n. </li> <li>Uso de Rollup: En producci\u00f3n, Vite utiliza Rollup para empaquetar los archivos, el cual implementa optimizaciones avanzadas como tree-shaking y code-splitting, lo que resulta en archivos finales m\u00e1s peque\u00f1os y r\u00e1pidos de cargar.</li> </ul>"},{"location":"empaqueado_de_frontend/compilar.html","title":"Compilando y exponiendo el servidor de vite","text":"<p>Vite es una herramienta moderna de construcci\u00f3n de frontend que permite un desarrollo r\u00e1pido y eficiente. A continuaci\u00f3n, se describen los pasos necesarios para compilar y exponer un proyecto utilizando Vite.</p>"},{"location":"empaqueado_de_frontend/compilar.html#requisitos-previos","title":"Requisitos Previos","text":"<p>Antes de comenzar, aseg\u00farate de tener instalados los siguientes elementos:</p> <ol> <li>Node.js: Desc\u00e1rgalo e inst\u00e1lalo desde nodejs.org.</li> <li>Gestor de paquetes npm o yarn: Estos vienen incluidos con Node.js.</li> <li>Vite: Si a\u00fan no lo tienes, puedes instalarlo globalmente con el siguiente comando:     <pre><code>npm install -g create-vite\n</code></pre></li> </ol>"},{"location":"empaqueado_de_frontend/compilar.html#pasos-para-compilar-el-proyecto","title":"Pasos para Compilar el Proyecto","text":"<ol> <li> <p>Instalar Dependencias Aseg\u00farate de que todas las dependencias del proyecto est\u00e9n instaladas ejecutando: <pre><code>npm install\n</code></pre></p> </li> <li> <p>Construir el Proyecto Para compilar el proyecto y generar los archivos est\u00e1ticos listos para producci\u00f3n, utiliza el comando: <pre><code>npm run build\n</code></pre> Esto generar\u00e1 una carpeta llamada <code>dist</code> que contiene los archivos optimizados.</p> </li> </ol>"},{"location":"empaqueado_de_frontend/compilar.html#exponer-el-servidor","title":"Exponer el Servidor","text":"<p>Una vez que el proyecto est\u00e1 compilado, puedes exponerlo de varias maneras. Aqu\u00ed hay algunas opciones comunes:</p>"},{"location":"empaqueado_de_frontend/compilar.html#1-usar-un-servidor-estatico-local","title":"1. Usar un Servidor Est\u00e1tico Local","text":"<p>Puedes usar un servidor est\u00e1tico como <code>serve</code> para probar los archivos localmente: <pre><code>npm install -g serve\nserve -s dist\n</code></pre> Esto iniciar\u00e1 un servidor local y expondr\u00e1 tu aplicaci\u00f3n en una URL como <code>http://localhost:5000</code>.</p>"},{"location":"empaqueado_de_frontend/compilar.html#2-desplegar-en-un-servidor-web","title":"2. Desplegar en un Servidor Web","text":"<p>Sube los archivos de la carpeta <code>dist</code> a un servidor web como Nginx, Apache o cualquier servicio de hosting.</p> <p>Ejemplo con Apache: - Copia los archivos de <code>dist</code> al directorio ra\u00edz de tu servidor web. - Configura Apache para servir los archivos editando el archivo de configuraci\u00f3n del sitio (por ejemplo, <code>000-default.conf</code>): <pre><code>&lt;VirtualHost *:80&gt;\n    ServerName decoupled.dev\n    DocumentRoot \"/decoupled/frontend/dist\"\n\n    &lt;Directory \"/decoupled/frontend/dist\"&gt;\n        Options Indexes FollowSymLinks\n        AllowOverride All\n        Require all granted\n    &lt;/Directory&gt;\n\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME} !-d\n    RewriteRule ^ index.html [L]\n&lt;/VirtualHost&gt;\n</code></pre> - Aseg\u00farate de habilitar el m\u00f3dulo <code>mod_rewrite</code> si no est\u00e1 activado:     <pre><code>a2enmod rewrite\nsystemctl restart apache2\n</code></pre></p>"},{"location":"empaqueado_de_frontend/compilar.html#dockerizando-el-frontend","title":"Dockerizando el frontend","text":""},{"location":"empaqueado_de_frontend/compilar.html#consideraciones-finales","title":"Consideraciones Finales","text":"<ul> <li> <p>Aseg\u00farate de configurar correctamente las rutas en tu aplicaci\u00f3n si utilizas un <code>base</code> diferente en Vite. Esto se puede hacer en el archivo <code>vite.config.js</code>: <pre><code>export default {\n    base: '/ruta-base/',\n};\n</code></pre></p> </li> <li> <p>Verifica que los archivos generados en <code>dist</code> est\u00e9n optimizados y listos para producci\u00f3n.</p> </li> </ul>"},{"location":"encriptamiento_de_informaci%C3%B3n/index.html","title":"SSL y TLS","text":""},{"location":"encriptamiento_de_informaci%C3%B3n/index.html#introduccion","title":"Introducci\u00f3n","text":"<p>SSL (Secure Sockets Layer) y TLS (Transport Layer Security) son protocolos criptogr\u00e1ficos dise\u00f1ados para proporcionar comunicaciones seguras a trav\u00e9s de redes como Internet. Aunque a menudo se mencionan juntos, TLS es esencialmente una versi\u00f3n m\u00e1s moderna y segura de SSL.</p>"},{"location":"encriptamiento_de_informaci%C3%B3n/index.html#que-es-ssl","title":"\u00bfQu\u00e9 es SSL?","text":"<p>SSL fue desarrollado por Netscape en la d\u00e9cada de 1990 para garantizar la privacidad, autenticaci\u00f3n e integridad de los datos transmitidos entre aplicaciones. Este protocolo utiliza cifrado para proteger la informaci\u00f3n sensible, como contrase\u00f1as, n\u00fameros de tarjetas de cr\u00e9dito y otros datos personales.</p>"},{"location":"encriptamiento_de_informaci%C3%B3n/index.html#caracteristicas-principales-de-ssl","title":"Caracter\u00edsticas principales de SSL:","text":"<ul> <li>Cifrado: Protege los datos transmitidos para que no puedan ser le\u00eddos por terceros.</li> <li>Autenticaci\u00f3n: Verifica la identidad del servidor y, opcionalmente, del cliente.</li> <li>Integridad: Garantiza que los datos no se alteren durante la transmisi\u00f3n.</li> </ul>"},{"location":"encriptamiento_de_informaci%C3%B3n/index.html#que-es-tls","title":"\u00bfQu\u00e9 es TLS?","text":"<p>TLS es el sucesor de SSL y fue introducido en 1999 como una mejora del protocolo original. Aunque a menudo se sigue utilizando el t\u00e9rmino \"SSL\" para referirse a ambos, TLS es el est\u00e1ndar actual debido a sus mejoras en seguridad y rendimiento.</p>"},{"location":"encriptamiento_de_informaci%C3%B3n/index.html#diferencias-clave-entre-ssl-y-tls","title":"Diferencias clave entre SSL y TLS:","text":"<ul> <li>Seguridad mejorada: TLS utiliza algoritmos de cifrado m\u00e1s fuertes y elimina vulnerabilidades presentes en SSL.</li> <li>Compatibilidad: TLS es compatible con versiones anteriores de SSL, pero se recomienda usar \u00fanicamente TLS en implementaciones modernas.</li> <li>Rendimiento: TLS incluye optimizaciones que lo hacen m\u00e1s eficiente en t\u00e9rminos de tiempo de conexi\u00f3n y uso de recursos.</li> </ul>"},{"location":"encriptamiento_de_informaci%C3%B3n/index.html#como-funcionan-ssl-y-tls","title":"\u00bfC\u00f3mo funcionan SSL y TLS?","text":"<ol> <li> <p>Handshake (apret\u00f3n de manos):</p> <ul> <li>El cliente y el servidor negocian los par\u00e1metros de seguridad, como el algoritmo de cifrado y la versi\u00f3n del protocolo.</li> <li>El servidor presenta un certificado digital para autenticar su identidad.</li> <li>Se genera una clave de sesi\u00f3n compartida para cifrar la comunicaci\u00f3n.</li> </ul> </li> <li> <p>Cifrado de datos:</p> <ul> <li>Una vez establecido el canal seguro, todos los datos transmitidos se cifran utilizando la clave de sesi\u00f3n.</li> </ul> </li> <li> <p>Verificaci\u00f3n de integridad:</p> <ul> <li>Se utilizan c\u00f3digos de autenticaci\u00f3n de mensajes (MAC) para garantizar que los datos no hayan sido alterados.</li> </ul> </li> </ol>"},{"location":"encriptamiento_de_informaci%C3%B3n/index.html#importancia-de-ssltls","title":"Importancia de SSL/TLS","text":"<p>El uso de SSL/TLS es esencial para proteger la privacidad y la seguridad en l\u00ednea. Algunos ejemplos de su aplicaci\u00f3n incluyen: - Navegaci\u00f3n web segura: HTTPS utiliza TLS para proteger las conexiones entre navegadores y servidores web. - Correo electr\u00f3nico: Protocolos como IMAP, POP3 y SMTP pueden usar TLS para cifrar mensajes. - Transferencia de archivos: FTPS y SFTP son versiones seguras de FTP que emplean TLS o SSH.</p>"},{"location":"encriptamiento_de_informaci%C3%B3n/index.html#conclusion","title":"Conclusi\u00f3n","text":"<p>SSL y TLS son fundamentales para garantizar la seguridad de las comunicaciones en l\u00ednea. Aunque SSL ya no se utiliza debido a sus vulnerabilidades, TLS ha tomado su lugar como el est\u00e1ndar de facto. Implementar TLS correctamente es crucial para proteger la informaci\u00f3n sensible y mantener la confianza de los usuarios.</p>"},{"location":"firewall/ufw.html","title":"UFW","text":"<p>UFW (Uncomplicated Firewall) es una herramienta dise\u00f1ada para facilitar la configuraci\u00f3n de un firewall en sistemas basados en Linux. Permite gestionar reglas de acceso de manera sencilla, ayudando a proteger el servidor de accesos no autorizados.</p>"},{"location":"firewall/ufw.html#instalacion","title":"Instalaci\u00f3n","text":"<p>Para instalar UFW en Debian/Ubuntu:</p> <pre><code>sudo apt update\nsudo apt install ufw\n</code></pre>"},{"location":"firewall/ufw.html#comandos-basicos","title":"Comandos b\u00e1sicos","text":"<ul> <li>Activar UFW:   <pre><code>sudo ufw enable\n</code></pre></li> <li>Ver el estado y reglas:   <pre><code>sudo ufw status verbose\n</code></pre></li> <li>Permitir acceso por puerto (ejemplo: SSH):   <pre><code>sudo ufw allow 22/tcp\n</code></pre></li> <li>Denegar acceso por puerto:   <pre><code>sudo ufw deny 80/tcp\n</code></pre></li> <li>Desactivar UFW:   <pre><code>sudo ufw disable\n</code></pre></li> </ul>"},{"location":"firewall/ufw.html#configuracion-basica","title":"Configuraci\u00f3n b\u00e1sica","text":"<p>Permitir solo SSH, HTTP y HTTPS:</p> <pre><code>sudo ufw allow 22/tcp\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw enable\n</code></pre>"},{"location":"manejadores_de_procesos/index.html","title":"PM2 (Node.js)","text":"<p>PM2 es un administrador de procesos avanzado para aplicaciones Node.js y otros entornos JavaScript. Permite ejecutar, monitorear y administrar aplicaciones en producci\u00f3n de manera sencilla y eficiente. Es ideal para mantener tus servicios corriendo de forma estable, reiniciarlos autom\u00e1ticamente ante fallos y facilitar el despliegue en servidores.</p>"},{"location":"manejadores_de_procesos/index.html#por-que-usar-pm2","title":"\u00bfPor qu\u00e9 usar PM2?","text":"<p>PM2 ofrece varias ventajas para la administraci\u00f3n de aplicaciones en producci\u00f3n:</p> <ul> <li>Ejecuci\u00f3n como servicio: Tus aplicaciones se mantienen activas incluso si cierras la terminal o el servidor se reinicia.</li> <li>Reinicio autom\u00e1tico: Si la aplicaci\u00f3n falla, PM2 la reinicia autom\u00e1ticamente, mejorando la disponibilidad.</li> <li>Monitoreo y administraci\u00f3n: Puedes ver el estado, consumo de recursos y logs de cada proceso en tiempo real.</li> <li>Gesti\u00f3n de m\u00faltiples procesos: Permite ejecutar varias instancias de una misma app (cluster) o diferentes apps simult\u00e1neamente.</li> <li>Manejo de logs y m\u00e9tricas: Centraliza los logs y facilita la integraci\u00f3n con herramientas externas.</li> </ul>"},{"location":"manejadores_de_procesos/index.html#instalacion","title":"Instalaci\u00f3n","text":"<p>PM2 se instala globalmente usando npm. Es recomendable tener Node.js instalado previamente.</p> <pre><code>npm install pm2 -g\n</code></pre> <p>Puedes verificar la instalaci\u00f3n con:</p> <pre><code>pm2 --version\n</code></pre>"},{"location":"manejadores_de_procesos/index.html#comandos-basicos","title":"Comandos b\u00e1sicos","text":""},{"location":"manejadores_de_procesos/index.html#iniciar-una-aplicacion","title":"Iniciar una aplicaci\u00f3n","text":"<p>Inicia tu aplicaci\u00f3n Node.js (o cualquier script compatible):</p> <pre><code>pm2 start app.js\n</code></pre> <p>Puedes especificar el nombre del proceso para identificarlo f\u00e1cilmente:</p> <pre><code>pm2 start app.js --name \"mi-app\"\n</code></pre>"},{"location":"manejadores_de_procesos/index.html#listar-procesos","title":"Listar procesos","text":"<p>Muestra todos los procesos gestionados por PM2:</p> <pre><code>pm2 list\n</code></pre>"},{"location":"manejadores_de_procesos/index.html#detener-una-aplicacion","title":"Detener una aplicaci\u00f3n","text":"<p>Detiene el proceso sin eliminarlo de la lista:</p> <pre><code>pm2 stop mi-app\n</code></pre>"},{"location":"manejadores_de_procesos/index.html#reiniciar-una-aplicacion","title":"Reiniciar una aplicaci\u00f3n","text":"<p>Reinicia el proceso, \u00fatil para aplicar cambios en el c\u00f3digo:</p> <pre><code>pm2 restart mi-app\n</code></pre>"},{"location":"manejadores_de_procesos/index.html#eliminar-una-aplicacion-de-pm2","title":"Eliminar una aplicaci\u00f3n de PM2","text":"<p>Elimina el proceso de la lista y lo detiene:</p> <pre><code>pm2 delete mi-app\n</code></pre>"},{"location":"manejadores_de_procesos/index.html#monitoreo-y-administracion","title":"Monitoreo y administraci\u00f3n","text":"<p>PM2 facilita el monitoreo y la administraci\u00f3n de tus aplicaciones:</p>"},{"location":"manejadores_de_procesos/index.html#ver-logs","title":"Ver logs","text":"<p>Muestra los logs en tiempo real de todos los procesos:</p> <pre><code>pm2 logs\n</code></pre> <p>Puedes filtrar por nombre de proceso:</p> <pre><code>pm2 logs mi-app\n</code></pre>"},{"location":"manejadores_de_procesos/index.html#monitoreo-en-tiempo-real","title":"Monitoreo en tiempo real","text":"<p>Abre una interfaz interactiva en la terminal para ver el uso de CPU, memoria y estado de cada proceso:</p> <pre><code>pm2 monit\n</code></pre>"},{"location":"manejadores_de_procesos/index.html#ejecutar-aplicaciones-en-modo-cluster","title":"Ejecutar aplicaciones en modo cluster","text":"<p>El modo cluster permite ejecutar varias instancias de una aplicaci\u00f3n, distribuy\u00e9ndolas entre los n\u00facleos disponibles del servidor. Esto mejora el rendimiento y la tolerancia a fallos.</p> <p>Ejemplo para usar todos los n\u00facleos:</p> <pre><code>pm2 start app.js -i max\n</code></pre> <p>Tambi\u00e9n puedes especificar el n\u00famero de instancias:</p> <pre><code>pm2 start app.js -i 4\n</code></pre>"},{"location":"manejadores_de_procesos/index.html#persistencia-de-procesos-arranque-automatico","title":"Persistencia de procesos (Arranque autom\u00e1tico)","text":"<p>Para que PM2 restaure autom\u00e1ticamente los procesos tras un reinicio del sistema, sigue estos pasos:</p> <ol> <li>Genera el script de inicio seg\u00fan tu sistema operativo:</li> </ol> <pre><code>pm2 startup\n</code></pre> <ol> <li>Guarda el estado actual de los procesos:</li> </ol> <pre><code>pm2 save\n</code></pre> <p>Esto asegura que tus aplicaciones se reinicien autom\u00e1ticamente al arrancar el servidor.</p>"},{"location":"manejadores_de_procesos/index.html#exportar-y-restaurar-configuracion","title":"Exportar y restaurar configuraci\u00f3n","text":"<p>PM2 permite guardar el estado de los procesos y restaurarlo f\u00e1cilmente:</p> <ul> <li>Exportar: Guarda la configuraci\u00f3n actual de los procesos en un archivo interno.</li> </ul> <pre><code>pm2 save\n</code></pre> <ul> <li>Restaurar: Recupera los procesos guardados previamente.</li> </ul> <pre><code>pm2 resurrect\n</code></pre>"},{"location":"manejadores_de_procesos/index.html#ecosistema-de-aplicaciones-con-pm2-ecosystemconfigjs","title":"Ecosistema de aplicaciones con PM2 (ecosystem.config.js)","text":"<p>PM2 permite gestionar m\u00faltiples aplicaciones y configuraciones avanzadas mediante un archivo especial llamado <code>ecosystem.config.js</code> (o <code>.json</code>). Este archivo facilita el despliegue y administraci\u00f3n de varios servicios desde un solo comando.</p>"},{"location":"manejadores_de_procesos/index.html#ejemplo-basico-de-ecosystemconfigjs","title":"Ejemplo b\u00e1sico de ecosystem.config.js","text":"<pre><code>module.exports = {\n  apps: [\n    {\n      name: \"api\",\n      script: \"api.js\",\n      instances: 2,\n      exec_mode: \"cluster\",\n    },\n    {\n      name: \"web\",\n      script: \"web.js\",\n      instances: 1,\n    },\n  ],\n};\n</code></pre>"},{"location":"manejadores_de_procesos/index.html#como-usarlo","title":"C\u00f3mo usarlo","text":"<ol> <li>Crea el archivo <code>ecosystem.config.js</code> en la ra\u00edz de tu proyecto.</li> <li>Inicia todas las aplicaciones definidas con:    <pre><code>pm2 start ecosystem.config.js\n</code></pre></li> <li>Puedes administrar los procesos como siempre (<code>pm2 list</code>, <code>pm2 stop api</code>, etc.).</li> </ol> <p>Este m\u00e9todo es ideal para proyectos con varios servicios, microservicios o APIs que deben ejecutarse y gestionarse juntos.</p>"},{"location":"manejadores_de_procesos/index.html#pm2-y-docker","title":"PM2 y Docker","text":"<p>Integrar PM2 con Docker te permite combinar la gesti\u00f3n de procesos robusta de PM2 con la portabilidad y el aislamiento de Docker, creando entornos de despliegue muy eficientes y escalables.</p> <p>Cuando usas PM2 dentro de un contenedor Docker, puedes aprovechar sus funcionalidades como el reinicio autom\u00e1tico, el modo cluster y el monitoreo, mientras Docker se encarga de empaquetar tu aplicaci\u00f3n y sus dependencias en un entorno consistente.</p>"},{"location":"manejadores_de_procesos/index.html#pm2-runtime-en-docker","title":"PM2 Runtime en Docker","text":"<p><code>pm2 runtime</code> es un comando espec\u00edfico de PM2 dise\u00f1ado para ejecutarse dentro de contenedores Docker. A diferencia de <code>pm2 start</code>, que est\u00e1 pensado para ejecutar PM2 como un demonio en el host, <code>pm2 runtime</code>:</p> <ul> <li>No demoniza el proceso: Se ejecuta en primer plano, lo que permite que Docker lo gestione como el proceso principal del contenedor. Esto es crucial para que Docker pueda monitorear la salud de tu aplicaci\u00f3n y detener el contenedor si el proceso de PM2 finaliza.</li> <li>Encapsula la l\u00f3gica de inicio: Facilita la ejecuci\u00f3n de tus aplicaciones (o tu archivo <code>ecosystem.config.js</code>) directamente, sin necesidad de comandos adicionales para mantener PM2 vivo.</li> <li>Manejo de se\u00f1ales: <code>pm2 runtime</code> maneja correctamente las se\u00f1ales de <code>SIGINT</code> y <code>SIGTERM</code> enviadas por Docker al detener o reiniciar un contenedor, asegurando un apagado limpio de tus aplicaciones.</li> </ul>"},{"location":"manejadores_de_procesos/index.html#dockerfile-con-pm2-runtime","title":"Dockerfile con <code>pm2 runtime</code>","text":"<p>Este es el Dockerfile utilizado para construir el frontend the la aplicaci\u00f3n de ruleta.</p> <pre><code># Multi-stage build for production optimization\n\n# Stage 1: Build the application\nFROM node:20-alpine AS builder\n\n# Set working directory\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install all dependencies (including dev dependencies for build)\nRUN npm ci\n\n# Copy source code\nCOPY . .\n\n# Build the application\nRUN npm run build\n\n# Stage 2: Production runtime\nFROM node:20-alpine AS production\n\n# Install PM2 globally and serve\nRUN npm install -g pm2 serve\n\n# Set working directory\nWORKDIR /app\n\n# Copy built application from builder stage\nCOPY --from=builder /app/dist ./dist\n\n# Copy PM2 ecosystem configuration\nCOPY ecosystem.config.cjs ./\n\n# Expose port 3210 (as defined in ecosystem.config.cjs)\nEXPOSE 3210\n\n# Start the application with PM2\nCMD [\"pm2-runtime\", \"start\", \"ecosystem.config.cjs\"]\n</code></pre> <p>Ventajas de usar <code>pm2 runtime</code> en Docker:</p> <ul> <li>Contenedores ligeros: Al no demonizar PM2, se reduce la complejidad y se mantiene un solo proceso principal por contenedor, lo cual es la mejor pr\u00e1ctica de Docker.</li> <li>Gesti\u00f3n de Logs: Los logs de tus aplicaciones gestionados por PM2 se redirigen a <code>stdout</code>/<code>stderr</code> del contenedor, lo que permite que Docker y tus herramientas de orquestaci\u00f3n (como Kubernetes o Docker Compose) los recolecten y procesen f\u00e1cilmente.</li> <li>Soporte de <code>ecosystem.config.js</code>: Puedes seguir utilizando tu archivo de configuraci\u00f3n de PM2 (<code>ecosystem.config.js</code>) para gestionar m\u00faltiples procesos o configuraciones avanzadas dentro de un solo contenedor Docker si tu arquitectura lo requiere, aunque la pr\u00e1ctica com\u00fan de Docker es un proceso por contenedor.</li> </ul> <p>La combinaci\u00f3n de PM2 y Docker (<code>pm2 runtime</code> en particular) te proporciona un poderoso mecanismo para desplegar y gestionar tus aplicaciones Node.js de manera confiable, escalable y con una excelente observabilidad en entornos de producci\u00f3n.</p>"},{"location":"manejadores_de_procesos/index.html#recursos-utiles","title":"Recursos \u00fatiles","text":"<ul> <li>Documentaci\u00f3n oficial de PM2</li> <li>Gu\u00eda r\u00e1pida de PM2</li> <li>PM2 en GitHub</li> </ul>"},{"location":"manejadores_de_procesos/wsgi.html","title":"WSGI Servers (Python)","text":"<p>Los servidores WSGI son esenciales para ejecutar aplicaciones web Python en producci\u00f3n. Act\u00faan como intermediarios entre la aplicaci\u00f3n y el servidor web.</p>"},{"location":"manejadores_de_procesos/wsgi.html#importancia","title":"Importancia","text":"<ul> <li>Permiten ejecutar aplicaciones Python de manera eficiente en entornos de producci\u00f3n.</li> <li>Soportan m\u00faltiples solicitudes concurrentes.</li> <li>Compatibles con frameworks como Flask y Django.</li> </ul>"},{"location":"manejadores_de_procesos/wsgi.html#instalacion","title":"Instalaci\u00f3n","text":"<p>Uno de los servidores WSGI m\u00e1s populares es Gunicorn. Para instalarlo:</p> <pre><code>pip install gunicorn\n</code></pre>"},{"location":"manejadores_de_procesos/wsgi.html#configuracion-basica","title":"Configuraci\u00f3n b\u00e1sica","text":"<p>Para iniciar una aplicaci\u00f3n Flask con Gunicorn:</p> <pre><code>gunicorn -w 4 -b 0.0.0.0:8000 app:app\n</code></pre> <ul> <li><code>-w 4</code> especifica el n\u00famero de trabajadores.</li> <li><code>-b 0.0.0.0:8000</code> define la direcci\u00f3n y el puerto.</li> </ul>"},{"location":"manejadores_de_procesos/wsgi.html#integracion-con-nginx","title":"Integraci\u00f3n con Nginx","text":"<p>Para usar Gunicorn detr\u00e1s de Nginx, configura un bloque de servidor en Nginx:</p> <pre><code>server {\n    listen 80;\n    server_name decoupled.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n</code></pre> <p>Esto redirige las solicitudes de Nginx al servidor Gunicorn.</p>"},{"location":"solucion_de_problemas/index.html","title":"Preguntas Frecuentes (FAQ)","text":"<p>Aqu\u00ed encontrar\u00e1s respuestas a preguntas comunes sobre el proyecto, su arquitectura y su funcionamiento.</p>"},{"location":"solucion_de_problemas/index.html#preguntas-generales","title":"Preguntas Generales","text":"<p>P: \u00bfCu\u00e1l es el prop\u00f3sito principal de este proyecto? R: Es una demostraci\u00f3n de una aplicaci\u00f3n web en tiempo real construida con una arquitectura de microservicios. Sirve como ejemplo pr\u00e1ctico de c\u00f3mo desacoplar componentes (autenticaci\u00f3n, l\u00f3gica de juego, saldos) en servicios independientes que se comunican eficientemente, utilizando un stack tecnol\u00f3gico variado.</p> <p>P: \u00bfPor qu\u00e9 usar microservicios en lugar de una aplicaci\u00f3n monol\u00edtica? R: La arquitectura de microservicios ofrece varias ventajas clave para este tipo de aplicaci\u00f3n:</p> <ul> <li>Escalabilidad: Cada servicio puede escalarse de forma independiente. Si muchos usuarios est\u00e1n apostando, se pueden crear m\u00e1s instancias del <code>management_microservice</code> sin afectar los otros servicios.</li> <li>Resiliencia: Un fallo en un servicio no cr\u00edtico (ej. el de autenticaci\u00f3n) no detiene el juego para los usuarios ya conectados.</li> <li>Flexibilidad Tecnol\u00f3gica: Permite usar las mejores herramientas para cada trabajo. Se usa Node.js en el <code>management_microservice</code> por su excelente manejo de eventos y WebSockets, mientras que Python se usa en otros microservicios por su robustez para l\u00f3gica de negocio.</li> <li>Mantenibilidad: Equipos m\u00e1s peque\u00f1os pueden trabajar en servicios individuales de forma aut\u00f3noma, lo que acelera el desarrollo y facilita las actualizaciones.</li> </ul>"},{"location":"solucion_de_problemas/index.html#preguntas-de-arquitectura-y-tecnicas","title":"Preguntas de Arquitectura y T\u00e9cnicas","text":"<p>P: \u00bfC\u00f3mo se comunican los diferentes servicios entre s\u00ed? R: Se utilizan tres m\u00e9todos de comunicaci\u00f3n principales, cada uno elegido por su idoneidad para la tarea:</p> <ol> <li>API REST (HTTP): El <code>frontend</code> se comunica con el <code>backend</code> (API Gateway) para operaciones s\u00edncronas y sin estado como el login y el registro. Es un est\u00e1ndar web bien conocido y f\u00e1cil de consumir.</li> <li>WebSockets: El <code>frontend</code> mantiene una conexi\u00f3n bidireccional y persistente con el <code>management_microservice</code>. Esto es crucial para la jugabilidad en tiempo real, permitiendo al servidor empujar actualizaciones (estado del juego, apuestas de otros, resultados) a los clientes instant\u00e1neamente.</li> <li>gRPC: Se utiliza para la comunicaci\u00f3n interna entre los servicios del backend. Es un framework de RPC (Remote Procedure Call) de alto rendimiento que usa HTTP/2 y Protocol Buffers, lo que lo hace mucho m\u00e1s r\u00e1pido y eficiente que REST para la comunicaci\u00f3n entre microservicios.</li> </ol> <p>P: \u00bfPor qu\u00e9 se usa Redis en esta arquitectura? R: Redis act\u00faa como una base de datos en memoria de alta velocidad. Su funci\u00f3n es gestionar datos vol\u00e1tiles y de acceso extremadamente r\u00e1pido para no sobrecargar la base de datos SQL principal. Sus usos clave son:</p> <ul> <li>Almacenamiento de Apuestas: Guarda las apuestas de todos los usuarios durante la fase de apuestas de 30 segundos.</li> <li>Gesti\u00f3n de Sesiones: Mapea las conexiones de Socket.IO a los IDs de usuario, permitiendo saber a qui\u00e9n enviar mensajes privados como la actualizaci\u00f3n de su saldo.</li> </ul> <p>P: \u00bfC\u00f3mo se sincroniza el estado del juego (ej. el temporizador) entre todos los jugadores? R: La sincronizaci\u00f3n es manejada centralmente por el <code>GameLoop</code> en el <code>management_microservice/GameLoop.ts</code>. Este bucle emite eventos de estado a trav\u00e9s de WebSockets a todos los clientes conectados. Por ejemplo, cuando comienza la fase de apuestas, emite un evento <code>GAME_STATE</code> que incluye la fase actual (<code>BETTING</code>) y el tiempo restante. Todos los clientes reciben esta misma informaci\u00f3n al mismo tiempo, asegurando que sus interfaces est\u00e9n sincronizadas.</p>"},{"location":"solucion_de_problemas/index.html#preguntas-de-funcionalidad","title":"Preguntas de Funcionalidad","text":"<p>P: \u00bfC\u00f3mo se determina el n\u00famero ganador? \u00bfEs realmente aleatorio? R: El n\u00famero ganador se determina de forma pseudoaleatoria en el servidor para garantizar la equidad y evitar trampas desde el cliente. El <code>management_microservice</code> genera una velocidad inicial aleatoria para la ruleta. Esta velocidad se env\u00eda al frontend para que la animaci\u00f3n sea consistente, pero el c\u00e1lculo final del n\u00famero ganador se realiza en el backend, como se ve en la clase <code>RouletteService</code>.</p> <p>P: \u00bfC\u00f3mo se calculan las ganancias? R: Despu\u00e9s de que se determina un n\u00famero ganador, el m\u00e9todo <code>calculateSpinResults</code> en <code>management_microservice/services/RouletteService.ts</code> itera sobre todas las apuestas almacenadas en Redis. Para cada apuesta, la funci\u00f3n <code>calculateBetWinnings</code> determina si es ganadora y calcula el pago seg\u00fan el tipo de apuesta (ej. 35:1 para un n\u00famero espec\u00edfico, 2:1 para una docena, 1:1 para rojo/negro).</p> <p>P: \u00bfPuedo a\u00f1adir saldo a mi cuenta? R: S\u00ed. En la interfaz de usuario, hay un bot\u00f3n \"Add Balance\" que simula una recarga. En una aplicaci\u00f3n real, esto redirigir\u00eda a una pasarela de pago. En este proyecto, al hacer clic, se podr\u00eda implementar una llamada al m\u00e9todo <code>AddBalance</code> del <code>balance_microservice/src/service/service.py</code> para incrementar el saldo del usuario.</p>"},{"location":"solucion_de_problemas/index.html#desarrollo-y-despliegue","title":"Desarrollo y Despliegue","text":"<p>P: \u00bfC\u00f3mo puedo ver los logs de un servicio espec\u00edfico mientras se ejecuta? R: Puedes usar el comando <code>docker-compose logs</code> con el flag <code>-f</code> para seguir los logs en tiempo real.</p> <pre><code># Ejemplo para ver los logs del management_microservice en tiempo real\ndocker-compose logs -f management_microservice\n</code></pre> <p>P: \u00bfQu\u00e9 necesito para desplegar esto en un servidor de producci\u00f3n? R: Los requisitos principales son Docker y Docker Compose en tu servidor. Los pasos se detallan en la secci\u00f3n \"Despliegue en Producci\u00f3n\" del <code>README.md</code>, pero en resumen: clonas el repositorio, ejecutas <code>docker-compose up --build -d</code>, y configuras un reverse proxy (como Nginx) para dirigir</p>"},{"location":"solucion_de_problemas/Troubleshooting.html","title":"Gu\u00eda de Soluci\u00f3n de Problemas (Troubleshooting)","text":"<p>Este documento te ayudar\u00e1 a diagnosticar y resolver problemas comunes que pueden surgir durante la instalaci\u00f3n, ejecuci\u00f3n o uso del proyecto de ruleta online.</p>"},{"location":"solucion_de_problemas/Troubleshooting.html#problemas-con-docker-y-docker-compose","title":"Problemas con Docker y Docker Compose","text":""},{"location":"solucion_de_problemas/Troubleshooting.html#error-service-failed-to-build","title":"Error: <code>Service '...' failed to build</code>","text":"<p>Este error indica que Docker no pudo construir la imagen para uno de los servicios.</p> <ul> <li>Causa Posible 1: Problemas de red al descargar dependencias (ej. paquetes <code>npm</code> o <code>pip</code>).</li> <li>Soluci\u00f3n: Verifica tu conexi\u00f3n a internet. Intenta ejecutar el comando de nuevo. Si el problema persiste, puedes forzar una reconstrucci\u00f3n sin cach\u00e9:</li> </ul> <pre><code>docker-compose build --no-cache &lt;nombre_del_servicio&gt;\ndocker-compose up -d\n</code></pre> <ul> <li>Causa Posible 2: Un error en el <code>Dockerfile</code> del servicio.</li> <li>Soluci\u00f3n: Revisa el <code>Dockerfile</code> del servicio que falla en busca de errores de sintaxis o comandos incorrectos.</li> </ul>"},{"location":"solucion_de_problemas/Troubleshooting.html#error-container-for-service-is-unhealthy-o-se-reinicia-constantemente","title":"Error: <code>Container for service '...' is unhealthy</code> o se reinicia constantemente","text":"<p>Esto significa que un contenedor se inici\u00f3 pero no pas\u00f3 la verificaci\u00f3n de estado (healthcheck) o se cerr\u00f3 inesperadamente.</p> <ul> <li>Causa Com\u00fan: El servicio no pudo conectarse a una de sus dependencias (ej. el <code>backend</code> no puede conectarse a un microservicio gRPC, o un microservicio no puede conectarse a Redis).</li> <li>Soluci\u00f3n: Revisa los logs del contenedor que est\u00e1 fallando para identificar el error exacto.   <pre><code># Reemplaza &lt;nombre_del_servicio&gt; con el servicio problem\u00e1tico (ej. backend, management_microservice)\ndocker-compose logs &lt;nombre_del_servicio&gt;\n</code></pre>   Busca mensajes de error como <code>Connection refused</code>, <code>Service Unavailable</code> o errores de inicializaci\u00f3n.</li> </ul>"},{"location":"solucion_de_problemas/Troubleshooting.html#error-port-is-already-allocated-o-address-already-in-use","title":"Error: <code>Port is already allocated</code> o <code>Address already in use</code>","text":"<ul> <li>Causa: Uno de los puertos que el proyecto intenta usar ya est\u00e1 ocupado por otra aplicaci\u00f3n en tu m\u00e1quina.</li> <li>Frontend: <code>3210</code> (definido en <code>frontend/ecosystem.config.cjs</code>)</li> <li>Backend: <code>3000</code></li> <li>Soluci\u00f3n: Det\u00e9n la aplicaci\u00f3n que est\u00e1 usando el puerto conflictivo o cambia el puerto en el archivo <code>docker-compose.yml</code> (para el backend) o en <code>frontend/ecosystem.config.cjs</code> (para el frontend).</li> </ul>"},{"location":"solucion_de_problemas/Troubleshooting.html#problemas-de-la-aplicacion","title":"Problemas de la Aplicaci\u00f3n","text":""},{"location":"solucion_de_problemas/Troubleshooting.html#el-frontend-carga-pero-el-loginregistro-falla-con-un-error-de-red","title":"El frontend carga, pero el Login/Registro falla con un error de red","text":"<ul> <li>S\u00edntoma: Al intentar iniciar sesi\u00f3n o registrarse, la interfaz muestra un error y la consola del navegador muestra un <code>POST</code> a <code>http://localhost:3000/...</code> fallido.</li> <li>Causa: El frontend no puede comunicarse con el API Gateway (<code>backend</code>).</li> <li>Pasos para Solucionar:</li> <li>Verifica que el backend est\u00e9 corriendo:       <pre><code>docker-compose ps\n</code></pre>       Aseg\u00farate de que el estado del contenedor <code>backend</code> sea <code>Up</code>.</li> <li>Revisa los logs del backend:       <pre><code>docker-compose logs backend\n</code></pre>       Busca cualquier error que haya ocurrido durante el inicio del servidor Express.</li> <li>Verifica la comunicaci\u00f3n gRPC: Si el backend est\u00e1 corriendo pero falla al procesar la solicitud, el problema puede ser la comunicaci\u00f3n con el <code>auth_microservice</code>. Revisa los logs de ambos servicios.</li> </ul>"},{"location":"solucion_de_problemas/Troubleshooting.html#el-usuario-inicia-sesion-pero-el-juego-no-funciona-la-ruleta-no-gira-el-temporizador-no-avanza","title":"El usuario inicia sesi\u00f3n, pero el juego no funciona (la ruleta no gira, el temporizador no avanza)","text":"<ul> <li>S\u00edntoma: La p\u00e1gina principal se carga despu\u00e9s del login, pero no hay actualizaciones en tiempo real. No se ven las apuestas de otros jugadores ni el estado del juego cambia.</li> <li>Causa: La conexi\u00f3n WebSocket con el <code>management_microservice</code> no se pudo establecer o se interrumpi\u00f3.</li> <li>Pasos para Solucionar:</li> <li>Verifica que el <code>management_microservice</code> est\u00e9 corriendo:       <pre><code>docker-compose ps\n</code></pre></li> <li>Revisa los logs del <code>management_microservice</code>:       <pre><code>docker-compose logs management_microservice\n</code></pre>       Busca errores de conexi\u00f3n con Redis o problemas al iniciar el servidor de Socket.IO.</li> <li>Revisa la consola del navegador: Abre las herramientas de desarrollador, ve a la pesta\u00f1a \"Network\" (Red) y filtra por \"WS\" (WebSockets). Deber\u00edas ver una conexi\u00f3n establecida. Si est\u00e1 en rojo o no aparece, la conexi\u00f3n fall\u00f3.</li> </ul>"},{"location":"solucion_de_problemas/Troubleshooting.html#las-apuestas-se-realizan-pero-el-saldo-no-se-actualiza-correctamente","title":"Las apuestas se realizan pero el saldo no se actualiza correctamente","text":"<ul> <li>S\u00edntoma: Un usuario realiza una apuesta, pero su saldo no disminuye, o despu\u00e9s de ganar una ronda, el saldo no aumenta.</li> <li>Causa: El <code>management_microservice</code> no puede comunicarse con el <code>balance_microservice</code> a trav\u00e9s de gRPC.</li> <li>Pasos para Solucionar:</li> <li>Revisa los logs del <code>management_microservice</code>: Busca errores relacionados con llamadas gRPC al intentar validar o pagar una apuesta.       <pre><code>docker-compose logs management_microservice\n</code></pre></li> <li>Revisa los logs del <code>balance_microservice</code>: Aseg\u00farate de que el servicio gRPC de Python se est\u00e9 ejecutando sin errores.       <pre><code>docker-compose logs balance_microservice\n</code></pre></li> </ul>"},{"location":"virtualizaci%C3%B3n/index.html","title":"M\u00e1quina Virtual vs Contenedor","text":"<p>Definici\u00f3n</p> <p>La virtualizaci\u00f3n es un proceso que permite a una computadora compartir sus recursos de hardware con varios entornos separados de forma digital. Cada entorno virtualizado se ejecuta dentro de los recursos asignados, como la memoria, la potencia de procesamiento y el almacenamiento.</p>"},{"location":"virtualizaci%C3%B3n/index.html#maquinas-virtuales","title":"M\u00e1quinas Virtuales","text":"<p>Un hipervisor (tambi\u00e9n llamado Virtual Machine Monitor, VMM) es una capa de software, firmware o hardware que permite crear, ejecutar y gestionar m\u00e1quinas virtuales (VMs) sobre un sistema f\u00edsico (host). Su funci\u00f3n principal es aislar y distribuir los recursos del hardware (CPU, memoria, almacenamiento, red) entre m\u00faltiples VMs, actuando como un intermediario que garantiza que cada una opere como si fuera un equipo independiente, incluso con sistemas operativos distintos.</p>"},{"location":"virtualizaci%C3%B3n/index.html#bare-metal-hypervisor","title":"Bare-metal Hypervisor","text":"<p>El hipervisor Tipo 1, tambi\u00e9n conocido como bare-metal, se ejecuta directamente sobre el hardware f\u00edsico del servidor, sin necesidad de un sistema operativo anfitri\u00f3n. Esto lo hace altamente eficiente, ya que tiene acceso directo a los recursos del hardware (CPU, memoria, almacenamiento), lo que reduce la sobrecarga y mejora el rendimiento de las m\u00e1quinas virtuales (VMs). Ejemplos de hipervisores Tipo 1 incluyen VMware ESXi, Microsoft Hyper-V (cuando se instala directamente en el hardware) y Xen.</p> <p>Este tipo de hipervisor es ideal para entornos empresariales y centros de datos, donde el rendimiento y la escalabilidad son cr\u00edticos. Al no depender de un sistema operativo base, es m\u00e1s seguro y estable, ya que reduce la superficie de ataque y los posibles puntos de fallo. Sin embargo, su configuraci\u00f3n y gesti\u00f3n pueden ser m\u00e1s complejas que las de un hipervisor Tipo 2, ya que requiere hardware compatible y conocimientos m\u00e1s avanzados.</p>"},{"location":"virtualizaci%C3%B3n/index.html#hosted-hypervisor","title":"Hosted Hypervisor","text":"<p>El hipervisor Tipo 2, o hosted, se instala como una aplicaci\u00f3n dentro de un sistema operativo anfitri\u00f3n (como Windows, Linux o macOS). Esto significa que depende del SO base para gestionar los recursos del hardware, lo que introduce una capa adicional de overhead y puede afectar al rendimiento de las m\u00e1quinas virtuales. Ejemplos comunes son Oracle VirtualBox, VMware Workstation y Parallels Desktop.</p> <p>Este tipo de hipervisor es m\u00e1s adecuado para entornos de desarrollo, pruebas o uso personal, donde la facilidad de uso y la flexibilidad son m\u00e1s importantes que el m\u00e1ximo rendimiento. Aunque es menos eficiente que un hipervisor Tipo 1, es m\u00e1s sencillo de configurar y utilizar, ya que no requiere hardware especializado. Sin embargo, al depender de un sistema operativo anfitri\u00f3n, puede ser m\u00e1s vulnerable a problemas de seguridad y inestabilidad si el SO base falla o es comprometido.</p>"},{"location":"virtualizaci%C3%B3n/index.html#contenedores","title":"Contenedores","text":"<p>Los contenedores son una forma de virtualizaci\u00f3n ligera que permite empaquetar una aplicaci\u00f3n junto con sus dependencias (bibliotecas, configuraciones, etc.) en una unidad aislada y portable. A diferencia de las m\u00e1quinas virtuales (VMs), los contenedores no requieren un sistema operativo completo para cada instancia, sino que comparten el kernel del sistema operativo anfitri\u00f3n, lo que los hace mucho m\u00e1s eficientes en uso de recursos y tiempo de arranque. Esto los hace ideales para entornos de desarrollo, despliegue \u00e1gil (DevOps) y escalado r\u00e1pido de aplicaciones.</p> <p>La tecnolog\u00eda de contenedores se basa en caracter\u00edsticas del kernel de Linux como namespaces (para aislamiento de procesos) y cgroups (para limitaci\u00f3n de recursos). Esto permite que m\u00faltiples contenedores se ejecuten de manera aislada en un mismo sistema sin interferir entre s\u00ed. Herramientas como Docker, Podman y Kubernetes han popularizado este enfoque, facilitando la creaci\u00f3n, distribuci\u00f3n y gesti\u00f3n de contenedores a gran escala.</p> <p>Nota</p> <p>Si bien existen m\u00faltiples motores de contenci\u00f3n de aplicaciones, esta gu\u00eda se enfocar\u00e1 \u00fanicamente en Docker.</p>"},{"location":"virtualizaci%C3%B3n/docker.html","title":"Docker","text":"<p>Es una plataforma de software que simplifica la creaci\u00f3n, despliegue y ejecuci\u00f3n de aplicaciones mediante contenedores.</p>"},{"location":"virtualizaci%C3%B3n/docker.html#que-es-un-contenedor","title":"\u00bfQu\u00e9 es un contenedor?","text":"<p>Un contenedor es una unidad estandarizada de software que empaqueta el c\u00f3digo de una aplicaci\u00f3n y todas sus dependencias (librer\u00edas, configuraciones, etc.) para que se ejecute de manera consistente en cualquier entorno. </p> <p>Las im\u00e1genes de contenedor se convierten en contenedores en tiempo de ejecuci\u00f3n, proporcionando un entorno aislado y ligero para la aplicaci\u00f3n. A diferencia de las m\u00e1quinas virtuales, los contenedores comparten el mismo kernel del sistema operativo anfitri\u00f3n, lo que los hace m\u00e1s eficientes en t\u00e9rminos de recursos y velocidad de arranque.</p> <p></p>"},{"location":"virtualizaci%C3%B3n/docker.html#dockerfile","title":"Dockerfile","text":"<p>El Dockerfile es un archivo de texto que contiene una serie de instrucciones para construir una imagen de Docker. Cada instrucci\u00f3n en el Dockerfile crea una capa en la imagen, lo que permite un proceso de construcci\u00f3n eficiente y reutilizable.</p>"},{"location":"virtualizaci%C3%B3n/docker.html#principales-instrucciones-del-dockerfile","title":"Principales instrucciones del Dockerfile","text":"<ol> <li>Imagen base: Define la imagen base a partir de la cual se construir\u00e1 la nueva imagen. Por ejemplo, <code>FROM ubuntu:20.04</code> o <code>FROM python:3.12</code>. </li> <li>Directorio de trabajo: Establece el directorio de trabajo dentro del contenedor. Por ejemplo, <code>WORKDIR /app</code>.</li> <li>Copiar archivos: Copia archivos desde el sistema anfitri\u00f3n al contenedor. Por ejemplo, <code>COPY . /app</code>.</li> <li>Correr comandos: Ejecuta comandos dentro del contenedor durante la construcci\u00f3n de la imagen. Usa <code>RUN</code> para ejecutar comandos como <code>RUN npm install</code>.</li> <li>Exponer puertos: Expone puertos espec\u00edficos del contenedor para que puedan ser accedidos desde el exterior. Por ejemplo, <code>EXPOSE 80</code>.</li> </ol>"},{"location":"virtualizaci%C3%B3n/docker.html#ejemplo-de-dockerfile","title":"Ejemplo de Dockerfile","text":"<p>Este es el Dockerfile que se utiliza para construir la imagen de esta documentaci\u00f3n:</p> <pre><code># Build stage\nFROM python:3.11-alpine as builder\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --user --no-cache-dir -r requirements.txt\n\nCOPY mkdocs/ .\n\nRUN /root/.local/bin/mkdocs build --site-dir /app/site\n\n# Runtime stage\nFROM nginx:alpine\nCOPY --from=builder /app/site /usr/share/nginx/html\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre>"},{"location":"virtualizaci%C3%B3n/docker.html#construir-una-imagen-desde-un-dockerfile","title":"Construir una imagen desde un Dockerfile","text":"<p>Para construir una imagen de Docker a partir de un Dockerfile, utiliza el siguiente comando en la terminal:</p> <pre><code>docker build -t nombre_imagen .\n</code></pre>"},{"location":"virtualizaci%C3%B3n/docker.html#ejecutar-un-contenedor-desde-una-imagen","title":"Ejecutar un contenedor desde una imagen","text":"<p>Para ejecutar un contenedor a partir de una imagen, utiliza el siguiente comando:</p> <pre><code>docker run -d -p 80:80 nombre_imagen\n</code></pre> <p>Donde <code>-d</code> ejecuta el contenedor en segundo plano y <code>-p 80:80</code> mapea el puerto 80 del contenedor al puerto 80 del sistema anfitri\u00f3n.</p>"},{"location":"virtualizaci%C3%B3n/docker_compose.html","title":"Docker compose","text":"<p>Docker Compose es una herramienta para definir y ejecutar aplicaciones de m\u00faltiples contenedores. Utiliza un \u00fanico archivo de configuraci\u00f3n YAML. Luego, con un solo comando, puedes crear y ejecutar todos los contenedores definidos en ese archivo.</p>"},{"location":"virtualizaci%C3%B3n/docker_compose.html#estructura-de-un-archivo-docker-composeyml","title":"Estructura de un archivo <code>docker-compose.yml</code>","text":""},{"location":"virtualizaci%C3%B3n/docker_compose.html#servicios","title":"Servicios","text":"<p>Un servicio es una definici\u00f3n de un contenedor que se ejecutar\u00e1. Cada servicio puede tener su propia imagen, configuraci\u00f3n de red, vol\u00famenes, etc.</p>"},{"location":"virtualizaci%C3%B3n/docker_compose.html#volumenes","title":"Vol\u00famenes","text":"<p>Los vol\u00famenes son utilizados para persistir datos generados por y utilizados por contenedores. Se definen en la secci\u00f3n <code>volumes</code> y pueden ser montados en uno o m\u00e1s servicios.</p>"},{"location":"virtualizaci%C3%B3n/docker_compose.html#redes","title":"Redes","text":"<p>Las redes permiten que los contenedores se comuniquen entre s\u00ed. Docker Compose crea una red por defecto, pero puedes definir redes personalizadas si es necesario.</p>"},{"location":"virtualizaci%C3%B3n/docker_compose.html#ejemplo","title":"Ejemplo","text":"<p>Este archivo define tres servicios: un frontend, un backend y una base de datos. El frontend es un servidor Nginx, el backend es una aplicaci\u00f3n que se conecta a la base de datos PostgreSQL.</p> <pre><code>services:\n  frontend:\n    image: nginx:latest\n    ports:\n      - \"80:80\"\n\n  backend:\n    image: my-backend-image:latest\n    environment:\n      - DATABASE_URL=postgres://db:5432/mydb\n    ports:\n      - \"5000:5000\"\n    depends_on:\n      - db\n\n  db:\n    image: postgres:latest\n    # env file\n    env_file: .env\n    volumes:\n      - db_data:/var/lib/postgresql/data\n\nvolumes:\n  db_data:\n</code></pre>"},{"location":"virtualizaci%C3%B3n/docker_compose.html#comandos-basicos","title":"Comandos B\u00e1sicos","text":"<p>Para iniciar los servicios definidos en el archivo <code>docker-compose.yml</code>, utiliza:</p> <pre><code>docker compose up\n</code></pre> <p>Si deseas volver a crear los contenedores y aplicar cambios en la configuraci\u00f3n, puedes la opci\u00f3n <code>--build</code>:</p> <p>Para detener los servicios, utiliza:</p> <pre><code>docker compose down\n</code></pre> <p>Para monitorizar los logs de todos los servicios, utiliza:</p> <pre><code>docker compose logs\n</code></pre>"},{"location":"web_server_%28proxy_reverso%29/index.html","title":"Una capa de seguridad y de rendimiento","text":"<p>Los servidores proxy reversos desempe\u00f1an un papel crucial. Mejoran el rendimiento al distribuir la carga y servir contenido est\u00e1tico y tambi\u00e9n a\u00f1aden una capa de seguridad al filtrar y gestionar las solicitudes entrantes.</p>"},{"location":"web_server_%28proxy_reverso%29/index.html#que-son-los-servidores-proxy-reversos","title":"\u00bfQu\u00e9 son los servidores proxy reversos?","text":"<p>Un servidor proxy reverso act\u00faa como intermediario entre los clientes (navegadores web, aplicaciones) y los servidores backend que procesan las solicitudes. En lugar de que los clientes se conecten directamente al servidor backend, el proxy reverso recibe las solicitudes, las procesa y las reenv\u00eda al backend adecuado.</p>"},{"location":"web_server_%28proxy_reverso%29/index.html#como-funcionan","title":"\u00bfC\u00f3mo funcionan?","text":"<ol> <li>Distribuci\u00f3n de carga: Los proxies reversos pueden distribuir las solicitudes entrantes entre varios servidores backend, equilibrando la carga y evitando que un solo servidor se sature.</li> <li>Cach\u00e9 de contenido: Almacenan en cach\u00e9 contenido est\u00e1tico como im\u00e1genes, archivos CSS y JavaScript, reduciendo la carga en los servidores backend y mejorando los tiempos de respuesta.</li> <li>Seguridad: Act\u00faan como una barrera de protecci\u00f3n, ocultando la infraestructura del backend y filtrando solicitudes maliciosas.</li> <li>Soporte para SSL/TLS: Gestionan certificados SSL/TLS para cifrar las conexiones, mejorando la seguridad de las comunicaciones.</li> </ol>"},{"location":"web_server_%28proxy_reverso%29/index.html#por-que-son-importantes","title":"\u00bfPor qu\u00e9 son importantes?","text":"<ul> <li>Rendimiento: Mejoran la velocidad de carga al reducir la latencia y optimizar el uso de recursos.</li> <li>Escalabilidad: Facilitan la adici\u00f3n de nuevos servidores backend para manejar un mayor volumen de tr\u00e1fico.</li> <li>Seguridad: Protegen contra ataques como DDoS, inyecciones de c\u00f3digo y accesos no autorizados.</li> </ul> <p>Herramientas como Apache, Nginx y Traefik son fundamentales para garantizar que las aplicaciones sean accesibles, r\u00e1pidas y seguras. Cada una de estas herramientas ofrece caracter\u00edsticas \u00fanicas que se adaptan a diferentes necesidades, desde configuraciones simples hasta arquitecturas complejas basadas en microservicios.</p>"},{"location":"web_server_%28proxy_reverso%29/apache.html","title":"Apache","text":"<p>Apache es uno de los servidores web m\u00e1s populares y ampliamente utilizados. Es conocido por su flexibilidad y capacidad para manejar una amplia variedad de configuraciones.</p>"},{"location":"web_server_%28proxy_reverso%29/apache.html#importancia","title":"Importancia","text":"<ul> <li>Es altamente configurable y extensible mediante m\u00f3dulos.</li> <li>Compatible con una amplia gama de sistemas operativos.</li> <li>Ideal para aplicaciones que requieren configuraciones avanzadas o personalizadas.</li> </ul>"},{"location":"web_server_%28proxy_reverso%29/apache.html#instalacion","title":"Instalaci\u00f3n","text":"<p>En sistemas basados en Debian/Ubuntu:</p> <pre><code>sudo apt update\nsudo apt install apache2\n</code></pre>"},{"location":"web_server_%28proxy_reverso%29/apache.html#configuracion-basica","title":"Configuraci\u00f3n b\u00e1sica","text":"<p>El archivo principal de configuraci\u00f3n se encuentra en <code>/etc/apache2/apache2.conf</code>. Para configurar un sitio web, edita o crea un archivo en <code>/etc/apache2/sites-available/</code>.</p> <p>Ejemplo de configuraci\u00f3n para un sitio:</p> <pre><code>&lt;VirtualHost *:80&gt;\n    ServerName decoupled.com\n    DocumentRoot /var/www/decoupled\n    &lt;Directory /var/www/decoupled&gt;\n        AllowOverride All\n        Require all granted\n    &lt;/Directory&gt;\n&lt;/VirtualHost&gt;\n</code></pre> <p>Habilita el sitio y reinicia Apache:</p> <pre><code>sudo a2ensite decoupled.conf\nsudo systemctl restart apache2\n</code></pre>"},{"location":"web_server_%28proxy_reverso%29/apache.html#configuracion-como-proxy-inverso","title":"Configuraci\u00f3n como Proxy Inverso","text":"<p>Si Apache est\u00e1 configurado como proxy inverso para un servicio que ya est\u00e1 corriendo en un puerto espec\u00edfico (por ejemplo, un frontend servido por PM2 en el puerto 3000), puedes configurar Apache para redirigir las solicitudes a ese puerto.</p> <p>Ejemplo de configuraci\u00f3n:</p> <pre><code>&lt;VirtualHost *:80&gt;\n    ServerName decoupled.com\n\n    ProxyPreserveHost On\n    ProxyPass / http://localhost:3000/\n    ProxyPassReverse / http://localhost:3000/\n\n    ErrorLog ${APACHE_LOG_DIR}/decoupled-error.log\n    CustomLog ${APACHE_LOG_DIR}/decoupled-access.log combined\n&lt;/VirtualHost&gt;\n</code></pre>"},{"location":"web_server_%28proxy_reverso%29/apache.html#pasos-para-habilitar-esta-configuracion","title":"Pasos para habilitar esta configuraci\u00f3n:","text":"<ol> <li>Habilita los m\u00f3dulos necesarios:</li> </ol> <pre><code>sudo a2enmod proxy\nsudo a2enmod proxy_http\n</code></pre> <ol> <li> <p>Crea o edita el archivo de configuraci\u00f3n del sitio en <code>/etc/apache2/sites-available/decoupled.conf</code> con el contenido anterior.</p> </li> <li> <p>Habilita el sitio y reinicia Apache:</p> </li> </ol> <pre><code>sudo a2ensite decoupled.conf\nsudo systemctl restart apache2\n</code></pre>"},{"location":"web_server_%28proxy_reverso%29/apache.html#configuracion-para-archivos-estaticos","title":"Configuraci\u00f3n para Archivos Est\u00e1ticos","text":"<p>Si deseas servir archivos est\u00e1ticos (por ejemplo, un bundle generado por una herramienta como Vite), puedes configurar Apache para que apunte al directorio donde se encuentran los archivos.</p> <p>Ejemplo de configuraci\u00f3n:</p> <pre><code>&lt;VirtualHost *:80&gt;\n    ServerName decoupled.com\n    DocumentRoot /var/www/decoupled/dist\n\n    &lt;Directory /var/www/decoupled/dist&gt;\n        Options Indexes FollowSymLinks\n        AllowOverride All\n        Require all granted\n    &lt;/Directory&gt;\n\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME} !-d\n    RewriteRule ^ index.html [L]\n&lt;/VirtualHost&gt;\n</code></pre>"},{"location":"web_server_%28proxy_reverso%29/apache.html#pasos-para-habilitar-esta-configuracion_1","title":"Pasos para habilitar esta configuraci\u00f3n:","text":"<ol> <li> <p>Copia los archivos est\u00e1ticos al directorio <code>/var/www/decoupled/dist</code>.</p> </li> <li> <p>Aseg\u00farate de habilitar el m\u00f3dulo <code>mod_rewrite</code> si no est\u00e1 activado:</p> </li> </ol> <pre><code>sudo a2enmod rewrite\nsudo systemctl restart apache2\n</code></pre>"},{"location":"web_server_%28proxy_reverso%29/apache.html#configuracion-para-https","title":"Configuraci\u00f3n para HTTPS","text":"<p>Para habilitar HTTPS en Apache, necesitas un certificado SSL/TLS. Aqu\u00ed tienes los pasos b\u00e1sicos:</p>"},{"location":"web_server_%28proxy_reverso%29/apache.html#1-habilitar-el-modulo-ssl","title":"1. Habilitar el m\u00f3dulo SSL","text":"<pre><code>sudo a2enmod ssl\nsudo systemctl restart apache2\n</code></pre>"},{"location":"web_server_%28proxy_reverso%29/apache.html#2-configurar-el-virtualhost-para-https","title":"2. Configurar el VirtualHost para HTTPS","text":"<p>Edita o crea un archivo de configuraci\u00f3n en <code>/etc/apache2/sites-available/</code> para incluir un bloque <code>VirtualHost</code> que escuche en el puerto 443:</p> <pre><code>&lt;VirtualHost *:443&gt;\n    ServerName decoupled.com\n    DocumentRoot /var/www/decoupled\n\n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt\n    SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key\n\n    &lt;Directory /var/www/decoupled&gt;\n        AllowOverride All\n        Require all granted\n    &lt;/Directory&gt;\n\n    ErrorLog ${APACHE_LOG_DIR}/decoupled-error.log\n    CustomLog ${APACHE_LOG_DIR}/decoupled-access.log combined\n&lt;/VirtualHost&gt;\n</code></pre>"},{"location":"web_server_%28proxy_reverso%29/apache.html#3-habilitar-el-sitio-y-reiniciar-apache","title":"3. Habilitar el sitio y reiniciar Apache","text":"<pre><code>sudo a2ensite decoupled-ssl.conf\nsudo systemctl restart apache2\n</code></pre>"},{"location":"web_server_%28proxy_reverso%29/apache.html#configuracion-para-balanceo-de-carga","title":"Configuraci\u00f3n para Balanceo de Carga","text":"<p>Apache no realiza balanceo de carga autom\u00e1ticamente, pero puedes configurarlo habilitando los m\u00f3dulos necesarios y definiendo un VirtualHost para distribuir las solicitudes entre varios servidores backend.</p>"},{"location":"web_server_%28proxy_reverso%29/apache.html#pasos-para-configurar-balanceo-de-carga","title":"Pasos para Configurar Balanceo de Carga","text":"<ol> <li>Habilitar los m\u00f3dulos necesarios:</li> </ol> <pre><code>sudo a2enmod proxy\nsudo a2enmod proxy_balancer\nsudo a2enmod lbmethod_byrequests\nsudo systemctl restart apache2\n</code></pre> <ol> <li>Configurar un VirtualHost para balanceo de carga:    Edita o crea un archivo en <code>/etc/apache2/sites-available/</code> con la siguiente configuraci\u00f3n:</li> </ol> <pre><code>&lt;VirtualHost *:80&gt;\n    ServerName decoupled.com\n\n    ProxyPreserveHost On\n\n    &lt;Proxy \"balancer://mi_cluster\"&gt;\n        BalancerMember http://192.168.1.101:8080\n        BalancerMember http://192.168.1.102:8080\n        ProxySet lbmethod=byrequests\n    &lt;/Proxy&gt;\n\n    ProxyPass / balancer://mi_cluster/\n    ProxyPassReverse / balancer://mi_cluster/\n\n    ErrorLog ${APACHE_LOG_DIR}/balanceo-error.log\n    CustomLog ${APACHE_LOG_DIR}/balanceo-access.log combined\n&lt;/VirtualHost&gt;\n</code></pre> <ul> <li><code>BalancerMember</code> define los servidores backend que recibir\u00e1n las solicitudes.</li> <li> <p><code>lbmethod=byrequests</code> distribuye las solicitudes de manera uniforme entre los servidores.</p> </li> <li> <p>Habilitar el sitio y reiniciar Apache:    <pre><code>sudo a2ensite balanceo.conf\nsudo systemctl restart apache2\n</code></pre></p> </li> </ul> <p>Con esta configuraci\u00f3n, Apache actuar\u00e1 como un balanceador de carga, distribuyendo las solicitudes entre los servidores backend definidos.</p>"},{"location":"web_server_%28proxy_reverso%29/apache.html#configuracion-especifica-de-roulettedecoupleddev","title":"Configuracion especifica de roulette.decoupled.dev","text":"<pre><code>&lt;VirtualHost *:80&gt;\n    ServerName roulette.decoupled.dev\n    ServerAlias localhost\n\n    ProxyPass \"/api\" \"http://localhost:3000\"\n    ProxyPassReverse \"/api\" \"http://localhost:3000\"\n\n    ProxyPass \"/docs\" \"http://localhost:2025\"\n    ProxyPassReverse \"/docs\" \"http://localhost:2025\"\n\n\n    ProxyPass \"/socket.io/\" \"ws://localhost:50053/socket.io/\"\n    ProxyPassReverse \"/socket.io/\" \"ws://localhost:50053/socket.io/\"\n\n    ProxyPass \"/\" \"http://localhost:3210/\"\n    ProxyPassReverse \"/\" \"http://localhost:3210/\"\n\n    ErrorLog /var/log/apache2/roulette_error.log\n    CustomLog /var/log/apache2/roulette_access.log combined\n\n    RewriteEngine On\n    RewriteCond %{HTTP:Upgrade} =websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/socket/(.*) ws://localhost:50053/$1 [P,L]\n&lt;/VirtualHost&gt;\n</code></pre>"},{"location":"web_server_%28proxy_reverso%29/nginx.html","title":"Nginx","text":"<p>Nginx es un servidor web y proxy inverso conocido por su alto rendimiento y bajo consumo de recursos.</p>"},{"location":"web_server_%28proxy_reverso%29/nginx.html#importancia","title":"Importancia","text":"<ul> <li>Ideal para manejar grandes cantidades de tr\u00e1fico.</li> <li>Funciona como proxy inverso, balanceador de carga y servidor de contenido est\u00e1tico.</li> <li>Compatible con HTTP/2 y SSL/TLS.</li> </ul>"},{"location":"web_server_%28proxy_reverso%29/nginx.html#instalacion","title":"Instalaci\u00f3n","text":"<p>En sistemas basados en Debian/Ubuntu:</p> <pre><code>sudo apt update\nsudo apt install nginx\n</code></pre>"},{"location":"web_server_%28proxy_reverso%29/nginx.html#configuracion-basica","title":"Configuraci\u00f3n b\u00e1sica","text":"<p>El archivo principal de configuraci\u00f3n se encuentra en <code>/etc/nginx/nginx.conf</code>. Para configurar un sitio web, edita o crea un archivo en <code>/etc/nginx/sites-available/</code>.</p> <p>Ejemplo de configuraci\u00f3n para un sitio:</p> <pre><code>server {\n    listen 80;\n    server_name decoupled.com;\n    root /var/www/decoupled;\n\n    location / {\n        index index.html;\n    }\n}\n</code></pre> <p>Habilita el sitio y reinicia Nginx:</p> <pre><code>sudo ln -s /etc/nginx/sites-available/decoupled /etc/nginx/sites-enabled/\nsudo systemctl restart nginx\n</code></pre>"},{"location":"web_server_%28proxy_reverso%29/nginx.html#configuracion-como-proxy-inverso","title":"Configuraci\u00f3n como Proxy Inverso","text":"<p>Si Nginx est\u00e1 configurado como proxy inverso para un servicio que ya est\u00e1 corriendo en un puerto espec\u00edfico (por ejemplo, un frontend servido por PM2 en el puerto 3000), puedes configurar Nginx para redirigir las solicitudes a ese puerto.</p> <p>Ejemplo de configuraci\u00f3n:</p> <pre><code>server {\n    listen 80;\n    server_name decoupled.com;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n</code></pre>"},{"location":"web_server_%28proxy_reverso%29/nginx.html#configuracion-para-archivos-estaticos","title":"Configuraci\u00f3n para Archivos Est\u00e1ticos","text":"<p>Si deseas servir archivos est\u00e1ticos (por ejemplo, un bundle generado por una herramienta como Vite), puedes configurar Nginx para que apunte al directorio donde se encuentran los archivos.</p> <p>Ejemplo de configuraci\u00f3n:</p> <pre><code>server {\n    listen 80;\n    server_name decoupled.com;\n    root /var/www/decoupled/dist;\n\n    location / {\n        index index.html;\n        try_files $uri /index.html;\n    }\n}\n</code></pre>"},{"location":"web_server_%28proxy_reverso%29/nginx.html#pasos-para-habilitar-esta-configuracion","title":"Pasos para habilitar esta configuraci\u00f3n:","text":"<ol> <li> <p>Copia los archivos est\u00e1ticos al directorio <code>/var/www/decoupled/dist</code>.</p> </li> <li> <p>Habilita el sitio y reinicia Nginx:</p> </li> </ol> <pre><code>sudo ln -s /etc/nginx/sites-available/decoupled /etc/nginx/sites-enabled/\nsudo systemctl restart nginx\n</code></pre>"},{"location":"web_server_%28proxy_reverso%29/nginx.html#configuracion-para-balanceo-de-carga","title":"Configuraci\u00f3n para Balanceo de Carga","text":"<p>Nginx permite realizar balanceo de carga de manera eficiente y sencilla. Puedes configurar un bloque <code>upstream</code> para definir los servidores backend y luego usarlo en un bloque <code>server</code>.</p>"},{"location":"web_server_%28proxy_reverso%29/nginx.html#ejemplo-de-configuracion-para-balanceo-de-carga","title":"Ejemplo de Configuraci\u00f3n para Balanceo de Carga","text":"<ol> <li>Configurar un bloque <code>upstream</code>:    Edita o crea un archivo en <code>/etc/nginx/sites-available/</code> con la siguiente configuraci\u00f3n:</li> </ol> <pre><code>upstream mi_cluster {\n    server 192.168.1.101:8080;\n    server 192.168.1.102:8080;\n}\n\nserver {\n    listen 80;\n    server_name decoupled.com;\n\n    location / {\n        proxy_pass http://mi_cluster;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n</code></pre> <ul> <li><code>upstream</code> define los servidores backend que recibir\u00e1n las solicitudes.</li> <li> <p><code>proxy_pass</code> redirige las solicitudes al bloque <code>upstream</code>.</p> </li> <li> <p>Habilitar el sitio y reiniciar Nginx:    <pre><code>sudo ln -s /etc/nginx/sites-available/decoupled /etc/nginx/sites-enabled/\nsudo systemctl restart nginx\n</code></pre></p> </li> </ul> <p>Con esta configuraci\u00f3n, Nginx distribuir\u00e1 las solicitudes entrantes entre los servidores backend definidos en el bloque <code>upstream</code>.</p>"},{"location":"web_server_%28proxy_reverso%29/traefik.html","title":"Traefik","text":"<p>Traefik es un proxy inverso moderno dise\u00f1ado para integrarse f\u00e1cilmente con entornos de contenedores como Docker y Kubernetes.</p>"},{"location":"web_server_%28proxy_reverso%29/traefik.html#importancia","title":"Importancia","text":"<ul> <li>Configuraci\u00f3n din\u00e1mica basada en etiquetas o anotaciones.</li> <li>Soporte nativo para Let's Encrypt y HTTP/2.</li> <li>Ideal para arquitecturas basadas en microservicios.</li> </ul>"},{"location":"web_server_%28proxy_reverso%29/traefik.html#instalacion","title":"Instalaci\u00f3n","text":"<p>Con Docker:</p> <pre><code>docker run -d -p 80:80 -p 443:443 -p 8080:8080 \\\n  --name traefik \\\n  -v $PWD/traefik.yml:/etc/traefik/traefik.yml \\\n  traefik\n</code></pre>"},{"location":"web_server_%28proxy_reverso%29/traefik.html#configuracion-basica","title":"Configuraci\u00f3n b\u00e1sica","text":"<p>Ejemplo de archivo <code>traefik.yml</code>:</p> <pre><code>entryPoints:\n  web:\n    address: \":80\"\n  websecure:\n    address: \":443\"\n\nproviders:\n  docker:\n    exposedByDefault: false\n\ncertificatesResolvers:\n  letsencrypt:\n    acme:\n      email: admin@decoupled.com\n      storage: acme.json\n      httpChallenge:\n        entryPoint: web\n</code></pre> <p>Aseg\u00farate de montar el archivo de configuraci\u00f3n y reiniciar el contenedor si realizas cambios.</p>"},{"location":"web_server_%28proxy_reverso%29/traefik.html#configuracion-como-proxy-inverso","title":"Configuraci\u00f3n como Proxy Inverso","text":"<p>Si Traefik est\u00e1 configurado como proxy inverso para un servicio que ya est\u00e1 corriendo en un puerto espec\u00edfico (por ejemplo, un frontend servido por PM2 en el puerto 3000), puedes configurar Traefik para redirigir las solicitudes a ese puerto.</p> <p>Ejemplo de configuraci\u00f3n en <code>traefik.yml</code>:</p> <pre><code>http:\n  routers:\n    my-service:\n      rule: \"Host(`decoupled.com`)\"\n      service: my-service\n\n  services:\n    my-service:\n      loadBalancer:\n        servers:\n          - url: \"http://localhost:3000\"\n</code></pre>"},{"location":"web_server_%28proxy_reverso%29/traefik.html#pasos-para-habilitar-esta-configuracion","title":"Pasos para habilitar esta configuraci\u00f3n:","text":"<ol> <li> <p>Aseg\u00farate de que el archivo <code>traefik.yml</code> est\u00e9 montado correctamente en el contenedor de Traefik.</p> </li> <li> <p>Reinicia el contenedor de Traefik para aplicar los cambios:</p> </li> </ol> <pre><code>docker restart traefik\n</code></pre>"},{"location":"web_server_%28proxy_reverso%29/traefik.html#configuracion-para-archivos-estaticos","title":"Configuraci\u00f3n para Archivos Est\u00e1ticos","text":"<p>Si deseas servir archivos est\u00e1ticos (por ejemplo, un bundle generado por una herramienta como Vite), puedes configurar Traefik para que apunte al directorio donde se encuentran los archivos.</p> <p>Ejemplo de configuraci\u00f3n en <code>traefik.yml</code>:</p> <pre><code>http:\n  routers:\n    static-files:\n      rule: \"Host(`decoupled.com`)\"\n      service: static-files\n\n  services:\n    static-files:\n      loadBalancer:\n        servers:\n          - url: \"file:///var/www/decoupled/dist\"\n</code></pre>"},{"location":"web_server_%28proxy_reverso%29/traefik.html#pasos-para-habilitar-esta-configuracion_1","title":"Pasos para habilitar esta configuraci\u00f3n:","text":"<ol> <li> <p>Copia los archivos est\u00e1ticos al directorio <code>/var/www/decoupled/dist</code> en el servidor.</p> </li> <li> <p>Reinicia el contenedor de Traefik para aplicar los cambios:</p> </li> </ol> <pre><code>docker restart traefik\n</code></pre>"}]}